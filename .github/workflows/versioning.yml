name: Versioning

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, defaulting to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Read major.minor from VERSION file
          if [ -f "VERSION" ]; then
            MAJOR_MINOR=$(cat VERSION)
            echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          else
            echo "VERSION file not found, using 0.0"
            MAJOR_MINOR="0.0"
            echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          fi
          
          # Extract current patch version from latest tag
          CURRENT_VERSION=$(echo $LATEST_TAG | sed 's/v//')
          IFS='.' read -r CURRENT_MAJOR CURRENT_MINOR CURRENT_PATCH <<< "$CURRENT_VERSION"
          
          # Extract major.minor from VERSION file
          IFS='.' read -r MAJOR MINOR <<< "$MAJOR_MINOR"
          
          # Check if major.minor changed in VERSION file
          if [ "$MAJOR.$MINOR" != "$CURRENT_MAJOR.$CURRENT_MINOR" ]; then
            # Major or minor version changed, reset patch to 0
            NEW_PATCH=0
            echo "Major.minor version changed in VERSION file: $CURRENT_MAJOR.$CURRENT_MINOR → $MAJOR.$MINOR"
          else
            # Same major.minor, increment patch
            NEW_PATCH=$((CURRENT_PATCH + 1))
            echo "Incrementing patch version: $CURRENT_PATCH → $NEW_PATCH"
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
          echo "New tag: $NEW_TAG"

      - name: Create and push tag
        run: |
          git tag ${{ steps.get_tag.outputs.new_tag }}
          git push origin ${{ steps.get_tag.outputs.new_tag }}
          echo "Created and pushed tag: ${{ steps.get_tag.outputs.new_tag }}"